#################################
## Landstrom Biomarker Project ##
#################################

## imports
import csv
import pathlib
import statistics

###################################################################################################
disease_fi = "XXX/diseaseValues.csv"        ## File path to file generated by the R-code
control_fi = "XXX/controlValues.csv"        ## File path to file generated by the R-code
wilcox_fi = "XXX/wilcox_test_results.csv"   ## File path to file generated by the R-code
output_fi = "XXX/boxplotData.csv"           ## File path to write data for plotting in R
###################################################################################################

## load the data 
disease_data = []
with open(disease_fi, 'r') as infi:
    reader = csv.reader(infi)
    for row in reader:
        toAppend = row[:-14] ## remove/ignore the "phenotype" data at the end of each row
        disease_data.append(toAppend)

control_data = []
with open(control_fi , 'r') as infi:
    reader = csv.reader(infi)
    for row in reader:
        toAppend = row[:-14] ## remove/ignore the "phenotype" data at the end of each row
        control_data.append(toAppend)

## Wilcox test data
import pandas as pd
wilcox_data = pd.read_csv(wilcox_fi)
sorted_wd = wilcox_data.sort_values(by=["pAdj_w"], ascending=True)
top80_proteins = sorted_wd['Pro'].tolist()[0:80]

master_data = []
for protein in top80_proteins:                                              ## For every protein we want to look at
    for target in disease_data[0]:                                          ## Loop over the protein column names in disease data
        if protein == target:                                               ## Match between current top80 protein and column name protein
            columnIndex = disease_data[0].index(target)                     ## Get column index for the matched top80/column name protein
            for row in disease_data[1:]:                                    ## Loop over every row (sample/individual) in disease data (skipping protein column name/first row)
                master_data.append(["Disease", protein, row[columnIndex]])  ## Add the NPX reading at the protein-index, from each row (sample/individual)

for protein in top80_proteins:                                              ## Repeat the same procedure for control_data 
    for target in control_data[0]:
        if protein == target:
            columnIndex = control_data[0].index(target)
            for row in control_data[1:]:
                master_data.append(["Control", protein, row[columnIndex]])

with open(output_fi, 'w') as outfi:
    writer = csv.writer(outfi)
    writer.writerows(master_data)
